From c6eefe41ab5e8ae520c2124a017c313f2dce8a8c Mon Sep 17 00:00:00 2001
From: Jason Reeder <jreeder@ti.com>
Date: Thu, 5 Nov 2015 10:17:53 -0600
Subject: [PATCH] Enable PRUSS0 instead of PRUSS1 on the AM437x

This patch loads PRU firmware into PRUSS0 instead of
PRUSS1. PRUSS0 does not have shared RAM so references to
that memory was removed from the device tree as well as
from the pruss_remoteproc driver code. Since PRUSS0 must
access global memory through the OCP master port in PRUSS1
then code must be added to any PRUSS0 firmwares that will
set the STANDBY_INIT bit in the SYSCFG register of PRUSS1
to a value of 0 (as well as setting its own STANDBY_INIT
bit to 0).

Signed-off-by: Jason Reeder <jreeder@ti.com>
---
 arch/arm/boot/dts/am4372.dtsi         | 51 +++++++++++++++++------------------
 arch/arm/mach-omap2/pdata-quirks.c    |  2 +-
 drivers/remoteproc/pruss_remoteproc.c | 39 +++++++++++----------------
 3 files changed, 41 insertions(+), 51 deletions(-)

diff --git a/arch/arm/boot/dts/am4372.dtsi b/arch/arm/boot/dts/am4372.dtsi
index d4e0958..f4b56ec 100644
--- a/arch/arm/boot/dts/am4372.dtsi
+++ b/arch/arm/boot/dts/am4372.dtsi
@@ -246,11 +246,11 @@
 				ti,mbox-tx = <0 0 0>;
 				ti,mbox-rx = <0 0 3>;
 			};
-			mbox_pru1_0: mbox_pru1_0 {
+			mbox_pru0_0: mbox_pru0_0 {
 				ti,mbox-tx = <2 0 0>;
 				ti,mbox-rx = <3 0 0>;
 			};
-			mbox_pru1_1: mbox_pru1_1 {
+			mbox_pru0_1: mbox_pru0_1 {
 				ti,mbox-tx = <4 0 0>;
 				ti,mbox-rx = <5 0 0>;
 			};
@@ -818,42 +818,41 @@
 			interrupts = <GIC_SPI 111 IRQ_TYPE_LEVEL_HIGH>;
 		};
 
-		pruss1: pruss@54400000 {
+		pruss0: pruss@54440000 {
 			compatible = "ti,am4372-pruss";
 			ti,hwmods = "pruss";
-			reg = <0x54400000 0x2000>,
-			      <0x54402000 0x2000>,
-			      <0x54410000 0x8000>,
-			      <0x54420000 0x2000>,
-			      <0x54426000 0x2000>;
-			reg-names = "dram0", "dram1", "shrdram2", "intc", "cfg";
-			interrupts = <GIC_SPI 20 IRQ_TYPE_LEVEL_HIGH
-				      GIC_SPI 21 IRQ_TYPE_LEVEL_HIGH
-				      GIC_SPI 22 IRQ_TYPE_LEVEL_HIGH
-				      GIC_SPI 23 IRQ_TYPE_LEVEL_HIGH
-				      GIC_SPI 24 IRQ_TYPE_LEVEL_HIGH
-				      GIC_SPI 26 IRQ_TYPE_LEVEL_HIGH
-				      GIC_SPI 27 IRQ_TYPE_LEVEL_HIGH>;
+			reg = <0x54440000 0x1000>,
+			      <0x54442000 0x1000>,
+			      <0x54460000 0x2000>,
+			      <0x54466000 0x2000>;
+			reg-names = "dram0", "dram1", "intc", "cfg";
+			interrupts = <GIC_SPI 159 IRQ_TYPE_LEVEL_HIGH
+				      GIC_SPI 160 IRQ_TYPE_LEVEL_HIGH
+				      GIC_SPI 161 IRQ_TYPE_LEVEL_HIGH
+				      GIC_SPI 162 IRQ_TYPE_LEVEL_HIGH
+				      GIC_SPI 163 IRQ_TYPE_LEVEL_HIGH
+				      GIC_SPI 164 IRQ_TYPE_LEVEL_HIGH
+				      GIC_SPI 165 IRQ_TYPE_LEVEL_HIGH>;
 			#address-cells = <1>;
 			#size-cells = <1>;
 			ranges;
 
-			pru1_0: pru@54434000 {
+			pru0_0: pru@54474000 {
 				compatible = "ti,am4372-pru-rproc";
-				reg = <0x54434000 0x3000>,
-				      <0x54422000 0x400>,
-				      <0x54422400 0x100>;
+				reg = <0x54474000 0x1000>,
+				      <0x54462000 0x400>,
+				      <0x54462400 0x100>;
 				reg-names = "iram", "control", "debug";
-				mboxes = <&mailbox &mbox_pru1_0>;
+				mboxes = <&mailbox &mbox_pru0_0>;
 			};
 
-			pru1_1: pru@54438000 {
+			pru0_1: pru@54478000 {
 				compatible = "ti,am4372-pru-rproc";
-				reg = <0x54438000 0x3000>,
-				      <0x54424000 0x400>,
-				      <0x54424400 0x100>;
+				reg = <0x54478000 0x1000>,
+				      <0x54464000 0x400>,
+				      <0x54464400 0x100>;
 				reg-names = "iram", "control", "debug";
-				mboxes = <&mailbox &mbox_pru1_1>;
+				mboxes = <&mailbox &mbox_pru0_1>;
 			};
 		};
 
diff --git a/arch/arm/mach-omap2/pdata-quirks.c b/arch/arm/mach-omap2/pdata-quirks.c
index 3df2147..5537e93 100644
--- a/arch/arm/mach-omap2/pdata-quirks.c
+++ b/arch/arm/mach-omap2/pdata-quirks.c
@@ -434,7 +434,7 @@ struct of_dev_auxdata omap_auxdata_lookup[] __initdata = {
 	OF_DEV_AUXDATA("ti,am437-padconf", 0x44e10800, "44e10800.pinmux", &pcs_pdata),
 	OF_DEV_AUXDATA("ti,am4372-wkup-m3", 0x44d00000, "44d00000.wkup_m3",
 		       &wkup_m3_data),
-	OF_DEV_AUXDATA("ti,am4372-pruss", 0x54400000, "54400000.pruss",
+	OF_DEV_AUXDATA("ti,am4372-pruss", 0x54440000, "54440000.pruss",
 		       &pruss_pdata),
 	OF_DEV_AUXDATA("ti,am4376-sgx530", 0x56000000, "56000000.sgx",
 		       &sgx_pdata),
diff --git a/drivers/remoteproc/pruss_remoteproc.c b/drivers/remoteproc/pruss_remoteproc.c
index c465dea..c3b6f06 100644
--- a/drivers/remoteproc/pruss_remoteproc.c
+++ b/drivers/remoteproc/pruss_remoteproc.c
@@ -109,7 +109,6 @@
 enum pruss_mem {
 	PRUSS_MEM_DRAM0 = 0,
 	PRUSS_MEM_DRAM1,
-	PRUSS_MEM_SHRD_RAM2,
 	PRUSS_MEM_INTC,
 	PRUSS_MEM_CFG,
 	PRUSS_MEM_MAX,
@@ -206,7 +205,6 @@ struct pruss {
  * @iram_da: device address of Instruction RAM for this PRU
  * @pdram_da: device address of primary Data RAM for this PRU
  * @sdram_da: device address of secondary Data RAM for this PRU
- * @shrdram_da: device address of shared Data RAM
  * @fw_name: name of firmware image used during loading
  * @dbg_single_step: debug flag to set PRU into single step mode
  * @dbg_continuous: debug flag to restore PRU execution mode
@@ -223,7 +221,6 @@ struct pru_rproc {
 	u32 iram_da;
 	u32 pdram_da;
 	u32 sdram_da;
-	u32 shrdram_da;
 	const char *fw_name;
 	u32 dbg_single_step;
 	u32 dbg_continuous;
@@ -267,7 +264,7 @@ void pru_debug_write_reg(struct pru_rproc *pru, unsigned int reg, u32 val)
  *
  * Each PRU has access to all data memories within the PRUSS, accessible at
  * different ranges. So, look through both its primary and secondary Data
- * RAMs as well as any shared Data RAM to convert a PRU device address to
+ * RAMs to convert a PRU device address to
  * kernel virtual address. Data RAM0 is primary Data RAM for PRU0 and Data
  * RAM1 is primary Data RAM for PRU1.
  */
@@ -277,7 +274,6 @@ static void *pru_d_da_to_va(struct pru_rproc *pru, u32 da, int len)
 	u32 offset;
 	u32 index;
 	size_t dram_sz = pruss->mem_size[PRUSS_MEM_DRAM0];
-	size_t shrd_ram_sz = pruss->mem_size[PRUSS_MEM_SHRD_RAM2];
 
 	WARN_ON(pruss->mem_size[PRUSS_MEM_DRAM0] !=
 		pruss->mem_size[PRUSS_MEM_DRAM1]);
@@ -291,10 +287,6 @@ static void *pru_d_da_to_va(struct pru_rproc *pru, u32 da, int len)
 	} else if (da >= pru->sdram_da && da + len <= pru->sdram_da + dram_sz) {
 		offset = da - pru->sdram_da;
 		index = (pru->id + 1) % 2;
-	} else if (da >= pru->shrdram_da &&
-		   da + len <= pru->shrdram_da + shrd_ram_sz) {
-		offset = da - pru->shrdram_da;
-		index = 2;
 	} else {
 		return NULL;
 	}
@@ -846,7 +838,6 @@ static int pru_rproc_probe(struct platform_device *pdev)
 	pru->iram_da = 0;
 	pru->pdram_da = 0;
 	pru->sdram_da = 0x2000;
-	pru->shrdram_da = 0x10000;
 
 	for (i = 0; i < ARRAY_SIZE(mem_names); i++) {
 		res = platform_get_resource_byname(pdev, IORESOURCE_MEM,
@@ -1016,7 +1007,7 @@ static int pruss_probe(struct platform_device *pdev)
 	struct pruss_platform_data *pdata = dev_get_platdata(dev);
 	const struct pruss_private_data *data;
 	const char *mem_names[PRUSS_MEM_MAX] = {
-				"dram0", "dram1", "shrdram2", "intc", "cfg" };
+				"dram0", "dram1", "intc", "cfg" };
 
 	if (!node) {
 		dev_err(dev, "Non-DT platform device not supported\n");
@@ -1165,15 +1156,15 @@ static struct pru_private_data am335x_pru1_rproc_pdata = {
 	.fw_name = "am335x-pru1-fw",
 };
 
-/* AM437x PRUSS1 PRU core-specific private data */
-static struct pru_private_data am437x_pru1_0_rproc_pdata = {
+/* AM437x PRUSS0 PRU core-specific private data */
+static struct pru_private_data am437x_pru0_0_rproc_pdata = {
 	.id = 0,
-	.fw_name = "am437x-pru1_0-fw",
+	.fw_name = "am437x-pru0_0-fw",
 };
 
-static struct pru_private_data am437x_pru1_1_rproc_pdata = {
+static struct pru_private_data am437x_pru0_1_rproc_pdata = {
 	.id = 1,
-	.fw_name = "am437x-pru1_1-fw",
+	.fw_name = "am437x-pru0_1-fw",
 };
 
 /* AM57xx PRUSS1 PRU core-specific private data */
@@ -1216,12 +1207,12 @@ static struct pru_match_private_data am335x_pru_match_data[] = {
 /* AM43xx SoC-specific PRU Device data */
 static struct pru_match_private_data am437x_pru_match_data[] = {
 	{
-		.device_name	= "54434000.pru0",
-		.priv_data	= &am437x_pru1_0_rproc_pdata,
+		.device_name	= "54474000.pru0",
+		.priv_data	= &am437x_pru0_0_rproc_pdata,
 	},
 	{
-		.device_name	= "54438000.pru1",
-		.priv_data	= &am437x_pru1_1_rproc_pdata,
+		.device_name	= "54478000.pru1",
+		.priv_data	= &am437x_pru0_1_rproc_pdata,
 	},
 	{
 		/* sentinel */
@@ -1286,10 +1277,10 @@ static struct of_dev_auxdata am335x_pruss_rproc_auxdata_lookup[] = {
 	{ /* sentinel */ },
 };
 
-static struct of_dev_auxdata am437x_pruss1_rproc_auxdata_lookup[] = {
-	OF_DEV_AUXDATA("ti,am4372-pru-rproc", 0x54434000, "54434000.pru0",
+static struct of_dev_auxdata am437x_pruss0_rproc_auxdata_lookup[] = {
+	OF_DEV_AUXDATA("ti,am4372-pru-rproc", 0x54474000, "54474000.pru0",
 		       NULL),
-	OF_DEV_AUXDATA("ti,am4372-pru-rproc", 0x54438000, "54438000.pru1",
+	OF_DEV_AUXDATA("ti,am4372-pru-rproc", 0x54478000, "54478000.pru1",
 		       NULL),
 	{ /* sentinel */ },
 };
@@ -1327,7 +1318,7 @@ static struct pruss_private_data am437x_priv_data = {
 	.num_irqs = 7,
 	.host_events = (BIT(2) | BIT(3) | BIT(4) | BIT(5) |
 			BIT(6) | BIT(8) | BIT(9)),
-	.aux_data = am437x_pruss1_rproc_auxdata_lookup,
+	.aux_data = am437x_pruss0_rproc_auxdata_lookup,
 	.has_reset = true,
 };
 
-- 
1.9.1

