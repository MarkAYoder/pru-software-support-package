From cee5ca7b5ac6dbf659cac46ab2ddedf7362859ff Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Fri, 20 Feb 2015 16:32:08 -0600
Subject: [PATCH 10/13] remoteproc/pruss: fix loading of PRU resource table

The remoteproc core copies the resource table into the remote
processor device memory during the firmware boot process using a
cached table. The device address to copy the resource table into
is found using the function rproc_find_loaded_rsc_table(), which
internally leverages firmware sections and the rproc_da_to_va()
API to retrieve the device address.

The PRUSS remoteproc uses a non-linear addressing scheme and requires
some flags to be passed to its .da_to_va ops to differentiate IRAM
from DRAM. The distinction is made by using the ELF program header or
section header flags, but the ELF flags to indicate executable segments
is different between the two types. A misinterpretation of these flags
caused the resource table to be loaded into IRAM rather than DRAM.

Fix the decision logic in the .da_to_va ops based on the new semantics
used for the rproc_da_to_va() flags argument to identify the type of
ELF header and appropriate executable segment identification.

Patch is based on generalizing an initial solution from Craig McQueen.

Reported-by: Craig McQueen <craig.mcqueen@innerrange.com>
Signed-off-by: Suman Anna <s-anna@ti.com>
---
 drivers/remoteproc/pruss_remoteproc.c |    6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/drivers/remoteproc/pruss_remoteproc.c b/drivers/remoteproc/pruss_remoteproc.c
index f8b415b..728a821 100644
--- a/drivers/remoteproc/pruss_remoteproc.c
+++ b/drivers/remoteproc/pruss_remoteproc.c
@@ -758,8 +758,12 @@ static void *pru_da_to_va(struct rproc *rproc, u64 da, int len, u32 flags)
 {
 	struct pru_rproc *pru = rproc->priv;
 	void *va;
+	u32 exec_flag = 0;
 
-	if (flags & PF_X)
+	exec_flag = ((flags & RPROC_FLAGS_ELF_SHDR) ? flags & SHF_EXECINSTR :
+		     ((flags & RPROC_FLAGS_ELF_PHDR) ? flags & PF_X : 0));
+
+	if (exec_flag)
 		va = pru_i_da_to_va(pru, da, len);
 	else
 		va = pru_d_da_to_va(pru, da, len);
-- 
1.7.9.5

