From d15dcc5e446bdeefcf93685cc881ea32e44cbb53 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 19 Jan 2015 17:27:55 -0600
Subject: [PATCH 02/13] remoteproc/pruss: use match data instead of platform
 data for PRUs

The PRU platform devices are dynamically created during the probe
of the corresponding parent PRUSS driver. Each of the PRU processors
needs to have a unique id and load a separate image. This information
is currently supplied through platform data supplied through a
of_dev_auxdata structure to the of_platform_populate() API.

The platform data though is causing a kernel crash during the device
unregistration or during the PRUSS driver remove. The cause is
attributed to the difference in the management of the platform data
between the OF path and the traditional platform device creation path.
Any platform_data supplied for the OF devices through auxdata lookup
data is populated directly in the device's platform_data field, unlike
those created using platform API. The device removal code (with either
platform_device_unregister() or of_device_unregister()) exercises the
standard platform code and results in a kernel oops due to an invalid
kfree on this direct populated platform_data, similar to below:

Unable to handle kernel paging request at virtual address 73007061
pgd = ec71c000
[73007061] *pgd=00000000
Internal error: Oops: 1 [#1] SMP ARM
Modules linked in: pruss_remoteproc [last unloaded: virtio_rpmsg_bus]
CPU: 0 PID: 1165 Comm: sh Not tainted 3.14.29-00170-gabe5c2536ffd #34
task: ec4084c0 ti: ec73c000 task.ti: ec73c000
PC is at kfree+0x70/0xec
LR is at platform_device_release+0x18/0x34
...[snip]...
Backtrace:
[<c00ebdf4>] (kfree) from [<c03a709c>] (platform_device_release+0x18/0x34)
 r6:ec1a1d80 r5:ec31a810 r4:ec31a810 r3:c03a7084
[<c03a7084>] (platform_device_release) from [<c03a175c>] (device_release+0x34/0x98)
 r4:ec31a818 r3:c03a7084
[<c03a1728>] (device_release) from [<c02a24a8>] (kobject_release+0x98/0x1bc)
 r6:c093dbb0 r5:c0914968 r4:ec31a834 r3:c03a1728
[<c02a2410>] (kobject_release) from [<c02a261c>] (kobject_put+0x50/0x7c)
 r8:c03a1524 r7:00000001 r6:ec1a1d94 r5:ec73de40 r4:ec31a818
[<c02a25cc>] (kobject_put) from [<c03a1520>] (put_device+0x1c/0x20)
 r4:ec1a1c14
[<c03a1504>] (put_device) from [<c03a1538>] (klist_children_put+0x14/0x18)
[<c03a1524>] (klist_children_put) from [<c0618148>] (klist_next+0xc0/0x13c)
[<c0618088>] (klist_next) from [<c03a1808>] (device_for_each_child+0x48/0x7c)
 r10:ec6f3cc0 r8:ec4fc700 r7:00000000 r6:bf0071c4 r5:00000000 r4:00000000
[<c03a17c0>] (device_for_each_child) from [<bf007180>] (pruss_remove+0x40/0x84 [pruss_remoteproc])
 r6:ec31ac10 r5:ec24f400 r4:ec24f410
[<bf007140>] (pruss_remove [pruss_remoteproc]) from [<c03a6dd4>] (platform_drv_remove+0x1c/0x20)
 r7:0000000f r6:c0914af0 r5:bf009714 r4:ec24f410
[<c03a6db8>] (platform_drv_remove) from [<c03a5230>] (__device_release_driver+0x78/0xd0)
[<c03a51b8>] (__device_release_driver) from [<c03a52ac>] (device_release_driver+0x24/0x30)
 r5:ec24f410 r4:ec24f444

Fix this by migrating away from using the platform data and instead
supplying the same information to the PRU rproc driver through OF
device match data. This approach is taken to align with the long-term
upstream plan, where users are supposed to move off of the auxdata
approach as it is only to be used as a temporary migration path.

NOTE:
The individual SoC-specific of_dev_auxdata structures could have been
removed, but are retained for now for the benefit of having the
PRU core device names show up with an identifier like xxxxxxxx.pru0
instead of a generic xxxxxxxx.pru.

Signed-off-by: Suman Anna <s-anna@ti.com>
---
 drivers/remoteproc/pruss_remoteproc.c |  132 +++++++++++++++++++++++++--------
 1 file changed, 102 insertions(+), 30 deletions(-)

diff --git a/drivers/remoteproc/pruss_remoteproc.c b/drivers/remoteproc/pruss_remoteproc.c
index c16da32..da00a80 100644
--- a/drivers/remoteproc/pruss_remoteproc.c
+++ b/drivers/remoteproc/pruss_remoteproc.c
@@ -126,16 +126,26 @@ enum pru_mem {
 };
 
 /**
- * struct pru_rproc_platform_data - PRU core platform data
+ * struct pru_private_data - PRU core private data
  * @id: PRU index
  * @fw_name: firmware name to be used for the PRU core
  */
-struct pru_rproc_platform_data {
+struct pru_private_data {
 	u32 id;
 	const char *fw_name;
 };
 
 /**
+ * struct pru_match_private_data - match private data to handle multiple instances
+ * @device_name: device name of the PRU processor core instance
+ * @priv_data: PRU driver private data for this PRU processor core instance
+ */
+struct pru_match_private_data {
+	const char *device_name;
+	struct pru_private_data *priv_data;
+};
+
+/**
  * struct pruss_private_data - PRUSS driver private data
  * @num_irqs: number of interrupts to MPU
  * @host_events: bit mask of PRU host interrupts that are routed to MPU
@@ -765,13 +775,34 @@ static struct rproc_ops pru_rproc_ops = {
 	.da_to_va		= pru_da_to_va,
 };
 
+static const struct of_device_id pru_rproc_match[];
+
+static const struct pru_private_data *pru_rproc_get_private_data(
+						struct platform_device *pdev)
+{
+	const struct pru_match_private_data *data;
+	const struct of_device_id *match;
+
+	match = of_match_device(pru_rproc_match, &pdev->dev);
+	if (!match)
+		return ERR_PTR(-ENODEV);
+
+	data = match->data;
+	for (; data && data->device_name; data++) {
+		if (!strcmp(dev_name(&pdev->dev), data->device_name))
+			return data->priv_data;
+	}
+
+	return NULL;
+}
+
 static int pru_rproc_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct device_node *np = dev->of_node;
 	struct platform_device *ppdev = to_platform_device(dev->parent);
 	struct pru_rproc *pru;
-	struct pru_rproc_platform_data *pdata = dev_get_platdata(dev);
+	const struct pru_private_data *pdata;
 	struct rproc *rproc = NULL;
 	struct mbox_client *client;
 	struct resource *res;
@@ -783,8 +814,9 @@ static int pru_rproc_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
-	if (!pdata || !pdata->fw_name) {
-		dev_err(dev, "platform data (PRU-private) missing\n");
+	pdata = pru_rproc_get_private_data(pdev);
+	if (IS_ERR_OR_NULL(pdata) || !pdata->fw_name) {
+		dev_err(dev, "missing or incomplete PRU-private data\n");
 		return -ENODEV;
 	}
 
@@ -1118,73 +1150,113 @@ static int pruss_remove(struct platform_device *pdev)
 	return 0;
 }
 
-/* PRU0 core-specific platform data */
-static struct pru_rproc_platform_data pru0_rproc_pdata = {
+/* PRU0 core-specific private data */
+static struct pru_private_data pru0_rproc_pdata = {
 	.id = 0,
 	.fw_name = "rproc-pru0-fw",
 };
 
-/* PRU1 core-specific platform data */
-static struct pru_rproc_platform_data pru1_rproc_pdata = {
+/* PRU1 core-specific private data */
+static struct pru_private_data pru1_rproc_pdata = {
 	.id = 1,
 	.fw_name = "rproc-pru1-fw",
 };
 
-static struct pru_rproc_platform_data pru1_0_rproc_pdata = {
+static struct pru_private_data pru1_0_rproc_pdata = {
 	.id = 0,
 	.fw_name = "am57xx-pru1_0-fw",
 };
 
-static struct pru_rproc_platform_data pru1_1_rproc_pdata = {
+static struct pru_private_data pru1_1_rproc_pdata = {
 	.id = 1,
 	.fw_name = "am57xx-pru1_1-fw",
 };
 
-static struct pru_rproc_platform_data pru2_0_rproc_pdata = {
+static struct pru_private_data pru2_0_rproc_pdata = {
 	.id = 0,
 	.fw_name = "am57xx-pru2_0-fw",
 };
 
-static struct pru_rproc_platform_data pru2_1_rproc_pdata = {
+static struct pru_private_data pru2_1_rproc_pdata = {
 	.id = 1,
 	.fw_name = "am57xx-pru2_1-fw",
 };
 
 /* platform data to be added when creating the PRU platform devices */
 static struct of_dev_auxdata am335x_pru_rproc_auxdata_lookup[] = {
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x4a334000, "4a334000.pru0",
-		       &pru0_rproc_pdata),
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x4a338000, "4a338000.pru1",
-		       &pru1_rproc_pdata),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x4a334000, "4a334000.pru0", NULL),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x4a338000, "4a338000.pru1", NULL),
 	{ /* sentinel */ },
 };
 
 static struct of_dev_auxdata am4372_pru_rproc_auxdata_lookup[] = {
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x54434000, "54434000.pru0",
-		       &pru0_rproc_pdata),
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x54438000, "54438000.pru1",
-		       &pru1_rproc_pdata),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x54434000, "54434000.pru0", NULL),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x54438000, "54438000.pru1", NULL),
 	{ /* sentinel */ },
 };
 
 static struct of_dev_auxdata am5728_pruss1_rproc_auxdata_lookup[] = {
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b234000, "4b234000.pru0",
-		       &pru1_0_rproc_pdata),
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b238000, "4b238000.pru1",
-		       &pru1_1_rproc_pdata),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b234000, "4b234000.pru0", NULL),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b238000, "4b238000.pru1", NULL),
 	{ /* sentinel */ },
 };
 
 static struct of_dev_auxdata am5728_pruss2_rproc_auxdata_lookup[] = {
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b2b4000, "4b2b4000.pru0",
-		       &pru2_0_rproc_pdata),
-	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b2b8000, "4b2b8000.pru1",
-		       &pru2_1_rproc_pdata),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b2b4000, "4b2b4000.pru0", NULL),
+	OF_DEV_AUXDATA("ti,pru-rproc", 0x4b2b8000, "4b2b8000.pru1", NULL),
 	{ /* sentinel */ },
 };
 
+/*
+ * A single match structure is used against a unified compatible
+ * string "ti,pru-rproc" as the addresses of the different PRU cores
+ * are unique across all the applicable SoCs.
+ * XXX: A SoC-specific compatible string is probably a better option
+ *	for the future to allow more flexibility.
+ */
+static struct pru_match_private_data pru_match_data[] = {
+	/* AM33xx SoC-specific data */
+	{
+		.device_name	= "4a334000.pru0",
+		.priv_data	= &pru0_rproc_pdata,
+	},
+	{
+		.device_name	= "4b280000.pru1",
+		.priv_data	= &pru1_rproc_pdata,
+	},
+	/* AM43xx SoC-specific data */
+	{
+		.device_name	= "54434000.pru0",
+		.priv_data	= &pru0_rproc_pdata,
+	},
+	{
+		.device_name	= "54438000.pru1",
+		.priv_data	= &pru1_rproc_pdata,
+	},
+	/* AM57xx SoC-specific data */
+	{
+		.device_name	= "4b234000.pru0",
+		.priv_data	= &pru1_0_rproc_pdata,
+	},
+	{
+		.device_name	= "4b238000.pru1",
+		.priv_data	= &pru1_1_rproc_pdata,
+	},
+	{
+		.device_name	= "4b2b4000.pru0",
+		.priv_data	= &pru2_0_rproc_pdata,
+	},
+	{
+		.device_name	= "4b2b8000.pru1",
+		.priv_data	= &pru2_1_rproc_pdata,
+	},
+	{
+		/* sentinel */
+	},
+};
+
 static const struct of_device_id pru_rproc_match[] = {
-	{ .compatible = "ti,pru-rproc", .data = NULL, },
+	{ .compatible = "ti,pru-rproc", .data = pru_match_data, },
 	{},
 };
 MODULE_DEVICE_TABLE(of, pru_rproc_match);
-- 
1.7.9.5

